<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.javalab.board.repository.BoardRepository">

	<!-- ResultMap 정의 -->
	<resultMap id="BoardResultMap"
		type="com.javalab.board.vo.BoardVo">
		<id property="boardNo" column="board_no" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="memberId" column="member_id" />
		<result property="hitNo" column="hit_no" />
		<result property="regDate" column="reg_date" />
		<result property="rating" column="rating" />
		<result property="spoiler" column="spoiler" />
		<result property="replyGroup" column="reply_group" />
		<result property="replyOrder" column="reply_order" />
		<result property="replyIndent" column="reply_indent" />
		<association property="movieWithImage"
			javaType="com.javalab.board.vo.MovieWithImageVo">
			<id property="movieId" column="movie_id" />
			<result property="name" column="movie_name" />
			<result property="description" column="movie_description" />
			<result property="movieDate" column="movie_date" />
			<result property="fileName" column="file_name" />
		</association>
	</resultMap>

	<resultMap id="MovieWithImageResultMap"
		type="com.javalab.board.vo.MovieWithImageVo">
		<id property="movieId" column="movie_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="movieDate" column="movie_date" />
		<result property="regDate" column="reg_date" />
		<result property="genre" column="genre" />
		<result property="runningTime" column="running_time" />
		<result property="rating" column="rating" />
		<result property="ageRating" column="age_rating" />
		<result property="director" column="director" />
		<result property="cast" column="cast" />
	</resultMap>





	<!-- 게시물 목록 조회 -->
	<select id="getBoardList" resultMap="BoardResultMap">
		SELECT
		b.board_no,
		b.title,
		b.content,
		b.member_id,
		b.hit_no,
		b.reg_date,
		b.rating,
		b.reply_group,
		b.reply_order,
		b.reply_indent,
		m.movie_id AS movie_id, -- movie 테이블의 movie_id
		m.name AS movie_name, -- movie 테이블의 name
		m.description AS movie_description,
		m.movie_date,
		i.file_name
		FROM board b
		LEFT JOIN movie m ON b.movie_id = m.movie_id
		LEFT JOIN prod_img i ON m.movie_id = i.movie_id AND i.is_main = 0
		ORDER BY b.reg_date DESC
	</select>

	<!-- 영화 목록 조회 쿼리 -->
	<select id="getMovieList" resultMap="MovieWithImageResultMap">
		SELECT
		m.movie_id,
		m.name,
		m.description,
		m.movie_date,
		m.reg_date,
		m.genre,
		m.running_time,
		m.rating,
		m.age_rating,
		m.director,
		m.cast
		FROM movie m
		ORDER BY m.reg_date DESC
	</select>



	<!-- 특정 영화 조회 쿼리 -->
	<select id="getMovie" parameterType="long"
		resultMap="MovieWithImageResultMap">
		SELECT
		m.movie_id,
		m.name,
		m.description,
		m.movie_date,
		m.reg_date,
		m.genre,
		m.running_time,
		m.rating,
		m.age_rating,
		m.director,
		m.cast
		FROM movie m
		WHERE m.movie_id = #{movieId}
	</select>



	<!-- 게시물 목록 페이징 및 검색 -->
	<select id="getBoardListPaging" parameterType="Criteria"
		resultMap="BoardResultMap">
		SELECT
		b.board_no,
		b.title,
		b.member_id,
		b.hit_no,
		b.reg_date,
		b.reply_group,
		b.reply_order,
		b.reply_indent,
		b.spoiler,
		m.movie_id,
		m.name AS movie_name
		FROM (
		SELECT
		board_no,
		title,
		member_id,
		hit_no,
		reg_date,
		reply_group,
		reply_order,
		reply_indent,
		spoiler,
		movie_id,
		ROW_NUMBER() OVER (ORDER BY reply_group DESC, reply_order ASC) AS rnum
		FROM board
		<where>
			<if test="searchText != null and searchText != ''">
				title LIKE '%' || #{searchText} || '%'
				OR content LIKE '%' || #{searchText} || '%'
			</if>
			<if test="movieId != null">
				AND movie_id = #{movieId}
			</if>
		</where>
		) b
		LEFT JOIN movie m ON b.movie_id = m.movie_id
		WHERE rnum BETWEEN ((#{pageNum} - 1) * #{amount} + 1) AND (#{pageNum} *
		#{amount})
	</select>



	<!-- 게시물 상세 조회 -->
	<select id="getBoard" parameterType="int"
		resultMap="BoardResultMap">
		SELECT
		b.board_no,
		b.title,
		b.content,
		b.member_id,
		b.hit_no,
		b.reg_date,
		b.reply_group,
		b.reply_order,
		b.reply_indent,
		b.rating, -- board 테이블의 rating
		b.spoiler, -- board 테이블의 spoiler
		m.movie_id AS movie_id, -- movie 테이블의 movie_id
		m.name AS movie_name, -- movie 테이블의 name
		m.description AS movie_description, -- movie 테이블의 description
		m.movie_date AS movie_date, -- movie 테이블의 movie_date
		i.file_name AS file_name -- prod_img 테이블의 file_name
		FROM
		board b
		LEFT JOIN
		movie m ON b.movie_id = m.movie_id
		LEFT JOIN
		prod_img i ON m.movie_id = i.movie_id AND i.is_main = 0
		WHERE
		b.board_no = #{boardNo}
	</select>


	<!-- 특정 회원의 게시글 목록 조회 -->
<select id="findBoardsByMemberId" parameterType="String" resultMap="BoardResultMap">
    SELECT
        b.board_no,
        b.title,
        b.content,
        b.member_id,
        b.hit_no,
        b.reg_date,
        b.rating,
        b.reply_group,
        b.reply_order,
        b.reply_indent,
        i.file_name AS file_name
    FROM board b
    LEFT JOIN prod_img i ON b.movie_id = i.movie_id AND i.is_main = 1
    WHERE b.member_id = #{memberId}
    ORDER BY b.reg_date DESC
</select>


	<!-- 조회수 증가 -->
	<update id="increaseHitNo" parameterType="int">
		UPDATE board
		SET hit_no = hit_no + 1
		WHERE board_no = #{boardNo}
	</update>

	<!-- 전체 게시물 수 조회 -->
	<select id="getTotalBoardCount" parameterType="Criteria"
		resultType="int">
		SELECT COUNT(*)
		FROM BOARD
		<where>
			<if test="searchText != null">
				TITLE LIKE '%'||#{searchText}||'%' OR CONTENT LIKE
				'%'||#{searchText}||'%'
			</if>
		</where>
	</select>

	<!-- 게시물 등록 -->
	<insert id="insertBoard" parameterType="BoardVo">
		INSERT INTO board(
		board_no, title, content, member_id, hit_no, reg_date,
		reply_group, reply_order, reply_indent, rating, spoiler, movie_id) <!-- 영화 ID 추가 -->
		VALUES (
		board_seq.nextval, #{title}, #{content}, #{memberId}, 0,
		sysdate, #{replyGroup}, #{replyOrder}, #{replyIndent},
		#{rating}, #{spoiler}, #{movieWithImage.movieId} <!-- 영화 ID 추가 -->
		)
	</insert>


	<!-- 답글 순서 조정 -->
	<update id="updateReplyOrder" parameterType="BoardVo">
		UPDATE board SET reply_order= reply_order + 1
		WHERE reply_group= #{replyGroup} AND reply_order >= #{replyOrder}
	</update>

	<!-- 답글 등록 -->
	<insert id="insertReply" parameterType="BoardVo">
		INSERT INTO board (
		board_no,title ,content ,member_id ,hit_no ,reg_date ,reply_group ,reply_order
		,reply_indent ,spoiler) VALUES (
		board_seq.NEXTVAL ,#{title},#{content},#{memberId},0 ,SYSDATE ,#{replyGroup}
		,#{replyOrder} ,#{replyIndent} ,#{spoiler}
		)
	</insert>




	<!-- 영화 수정 -->
	<update id="updateBoard"
		parameterType="com.javalab.board.vo.BoardVo">
		UPDATE board
		SET title = #{title},
		content = #{content},
		hit_no = #{hitNo},
		rating = #{rating},
		spoiler = #{spoiler},
		movie_id = #{movieWithImage.movieId}  <!-- 영화 ID 추가 -->
		WHERE board_no = #{boardNo}  <!-- 세미콜론 제거 -->
	</update>






	<!-- 게시물 삭제 -->
	<delete id="deleteBoard" parameterType="int">
		DELETE FROM board WHERE board_no= #{boardNo}
	</delete>

</mapper>
